/'
    Copyright 2020 Intel Corporation
    Copyright IBM Corp. All Rights Reserved.

    SPDX-License-Identifier: Apache-2.0
'/

@startuml

'- force wrapping of longer text
'skinparam wrapWidth 400

!pragma teoz true

hide footbox
title Foot Box removed

title Fabric Private Chaincode - Chaincode invocation

actor "User" as User1 order 9

participant "Peer_CLI/\nClient SDK" as CLI order 10

participant "Ledger_enclave" as TLCC1 order 45 #99FF99

participant "Peer" as Peer order 25
participant "ERCC" as ERCC1 order 50

ref over User1, ERCC1
  see fpc-registration-new.puml
  |||
end ref
|||

User1 -> CLI ++: invoke <CC_Id, args, ...>

group prepare FPC proposal

CLI -> ERCC1 ++: queryECCInfos(CC_Id)
return ECCInfos = List<<Enclave_VK, Chaincode_EK, ... , ATTESTATION>, ...>

CLI -> CLI: verify ECCInfos
note right
  NOTE ECCInfos contains a list of all FPC enclave registered for CC_Id.

  Verify performs the same verification steps (i.e., attestation
  verification, etc.) as the registration step performed by ERCC.
  See fpc-registration.puml for more details.

  Note that this verification is only necessary iff User is not member
  of Org1, otherwise authenticated response enough. In that case, the
  user also has to query different peers from different orgs in order
  to satisfy a quorum as necessary for the lifecycle endorsement policy
  and channel configuration changes.

  NOTE: For MVP, ECCInfo only contains Chaincode_EK and no ECCInfo verification is needed.
end note

CLI -> CLI : r_key <- keyGen()
note right
    generate a symmetric key to
    encrypt the FPC chaincode result
end note

CLI -> CLI : args_ECC <- encrypt <args, r_key> with Chaincode_EK

end

group invoke
  CLI -> Peer ++: send proposal <CC_Id, args_enc, ...>

  alt FPC Chaincode is not running
      note right Peer
          handled implicitly by the peer which determines
          when to call run() from external builder.
      end note

      create participant "FPC_stub" as ECC1 order 26
      Peer -> ECC1 ++: call external builder run()
      note right
          NOTE: Any failure in ECC or FPC_Enclave will cause
          ecc (and docker) dieing so peer will notice it.
      end note


      ECC1 -> ECC1 ++: get sealed credentials
      note right ECC1
        FPC_stub has access to peer local
        storage through external builder.
      end note
      return

      create participant "FPC_stub_enclave" as Enclave1 order 30 #99FF99
      ECC1 -> Enclave1 ++ : spawn enclave with sealed credentials
      Enclave1 -> Enclave1 : unseal credentials and restore
      return
      return
  end

      Peer -> ECC1 ++: invoke (proposal(args_enc), CTX)
      note right
        Transaction context (CTX) used for all interactions
        with both, the untrusted ledger und trusted ledger (Ledger_enclave)
        within the invocation. It ensures that all state accesses
        are from the same state view (block height).
      end note
      ECC1 -> Enclave1 ++: invoke (proposal(args_enc), CTX)

      Enclave1 <-> TLCC1: establish secure channel based on local attestation

      Enclave1 -> Enclave1 : verify proposal

      Enclave1 -> TLCC1 ++: verify (proposal.creator, CTX)
      note over TLCC1
      Ledger_enclave access is needed to check that the creator
      (client identity) passes MSP validation, that is,
      it comes with a certificate that is a proper root
      of trust.
      end note
      return


      Enclave1 -> Enclave1 : <args, r_key> <- decrypt args_enc with Chaincode_DK

      note right
        If proposal contains optional Req_ledger_enclave_inst_id parameter,
        make sure it matches own Ledger_enclave_inst_id, otherwise abort.
        This is necessary for CC2CC calls to make sure the two chaincodes
        interact with the same Ledger_enclave instance and hence have consistent
        views on ledger state.
      end note

      Enclave1 -> Enclave1: result <- invoke(args, CTX)
      ref over Enclave1
        Chaincode execution
        see fpc-chaincode-execution.puml
      end ref


      Enclave1 -> Enclave1 : result_enc <- encrypt result with r_key
      note right
        The encryption is via authenticated symmetric cipher like aes-gcm
      end note
      Enclave1 -> Enclave1 : Sig_Enclave <- sign <args, read/writeset, result_enc> with Enclave_SK
      return <result_enc, Sig_Enclave>

    return <result_enc, Sig_Enclave>

    alt  MVP
      Peer -> Peer : create proposal response <args, read/writeset, result=<result_enc, Sig_Enclave, Enclave_VK>, ...>
      note right Peer
          Note that the result field of the proposal response contains
          a message that comprises the encrypted result produced by the
          enclave, the enclave signature, and the corresponding
          verification key.
      end note

    else Post-MVP: Validation
      Peer -> Peer : create proposal response <args, read/writeset, result=result_enc, ...>
      Peer -> Peer : Replace endorsement signature & cert of peer with Sig_enclave & CC_Parameters.Certificate
      note right Peer
          This step is performed using an FPC-specific endorsement plugin.
      end note
    end

    return proposal response
end

group complete transaction
    note right CLI
        Invoke at enough endorsing peers to satisfy
        endorsement policy and collect proposal responses.

        NOTE: For MVP we support a designated endorsing peer only
    end note
    loop for all/"enough" endorsers

        ref over CLI
            invoke
        end
    end
    CLI -> CLI : form transaction

    create entity Orderer order 100
    CLI -> Orderer : submit transaction
end

group result decryption
    CLI -> CLI : result_enc <- extract from proposal response
    CLI -> CLI : result <- decrypt result_enc with r_key
end


return result

|||

ref over User1, Orderer
    continue with validation phase after ordering
    see fpc-validation.puml
    |||
end ref

@enduml
