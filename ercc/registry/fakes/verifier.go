// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type AttestationVerifier struct {
	VerifyEvidenceStub        func([]byte, []byte, string) error
	verifyEvidenceMutex       sync.RWMutex
	verifyEvidenceArgsForCall []struct {
		arg1 []byte
		arg2 []byte
		arg3 string
	}
	verifyEvidenceReturns struct {
		result1 error
	}
	verifyEvidenceReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *AttestationVerifier) VerifyEvidence(arg1 []byte, arg2 []byte, arg3 string) error {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.verifyEvidenceMutex.Lock()
	ret, specificReturn := fake.verifyEvidenceReturnsOnCall[len(fake.verifyEvidenceArgsForCall)]
	fake.verifyEvidenceArgsForCall = append(fake.verifyEvidenceArgsForCall, struct {
		arg1 []byte
		arg2 []byte
		arg3 string
	}{arg1Copy, arg2Copy, arg3})
	stub := fake.VerifyEvidenceStub
	fakeReturns := fake.verifyEvidenceReturns
	fake.recordInvocation("VerifyEvidence", []interface{}{arg1Copy, arg2Copy, arg3})
	fake.verifyEvidenceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *AttestationVerifier) VerifyEvidenceCallCount() int {
	fake.verifyEvidenceMutex.RLock()
	defer fake.verifyEvidenceMutex.RUnlock()
	return len(fake.verifyEvidenceArgsForCall)
}

func (fake *AttestationVerifier) VerifyEvidenceCalls(stub func([]byte, []byte, string) error) {
	fake.verifyEvidenceMutex.Lock()
	defer fake.verifyEvidenceMutex.Unlock()
	fake.VerifyEvidenceStub = stub
}

func (fake *AttestationVerifier) VerifyEvidenceArgsForCall(i int) ([]byte, []byte, string) {
	fake.verifyEvidenceMutex.RLock()
	defer fake.verifyEvidenceMutex.RUnlock()
	argsForCall := fake.verifyEvidenceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *AttestationVerifier) VerifyEvidenceReturns(result1 error) {
	fake.verifyEvidenceMutex.Lock()
	defer fake.verifyEvidenceMutex.Unlock()
	fake.VerifyEvidenceStub = nil
	fake.verifyEvidenceReturns = struct {
		result1 error
	}{result1}
}

func (fake *AttestationVerifier) VerifyEvidenceReturnsOnCall(i int, result1 error) {
	fake.verifyEvidenceMutex.Lock()
	defer fake.verifyEvidenceMutex.Unlock()
	fake.VerifyEvidenceStub = nil
	if fake.verifyEvidenceReturnsOnCall == nil {
		fake.verifyEvidenceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.verifyEvidenceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *AttestationVerifier) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.verifyEvidenceMutex.RLock()
	defer fake.verifyEvidenceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *AttestationVerifier) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
