// Copyright IBM Corp. All Rights Reserved.
// Copyright 2020 Intel Corporation
//
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

import "google/protobuf/any.proto";
import "fabric/peer/chaincode.proto";
import "fabric/peer/proposal_response.proto";
import "fabric/ledger/rwset/kvrwset/kv_rwset.proto";

package fpc;
option go_package = "github.com/hyperledger-labs/fabric-private-chaincode/internal/protos";

message CC_Parameters {
    // name of the chaincode
    string chaincode_id = 1;

    // version of chaincode, this is the expected mrenclave
    // encoded as hexstring (as generated by common/enclave/generate_mrenclave.sh)
    string version = 2;

    // chaincode sequence number
    int64 sequence = 3;

    // name of channel
    string channel_id = 4;
}

message Host_Parameters {
    // peer that hosts the enclave
    // this is a serialized msp.SerializedIdentity (see https://github.com/hyperledger/fabric-protos/blob/master/msp/identities.proto#L15)
    bytes peer_identity = 1;

    // Post-MVP: This will be a X509 peer certificate on
    // Enclave_VK and CC_Parameters signed by a CA rooted in
    // the MSP of the Organization hosting the peer running the FPC
    // Chaincode enclave.  This shows the "ownership" of Org for that
    //particular FPC Chaincode enclave.   See additional information in
    // fpc-registration.puml in the 'Org-Enclave binding/certification' group.
    // Note that this field may be moved elsewhere.
    bytes certificate = 2;
}

message Attested_Data {
    CC_Parameters cc_params = 1;

    Host_Parameters host_params = 2;

    // chaincode enclave public key
    bytes enclave_vk = 3;

    // SHA256 hash of the channel genesis block;
    bytes channel_hash = 4;

    // expected TLCC mrenclave
    // encoded as hexstring (as generated by common/enclave/generate_mrenclave.sh)
    string tlcc_mrenclave = 5;
}

message Credentials {
    // serialization of type **Attested_Data**
    google.protobuf.Any serialized_attested_data = 1;

    // serialized attestation/quote as output by `get_attestatation`, see `interfaces.attestation.md`
    bytes attestation = 2;

    // serialized attestation evidence as output by `AttestationToEvidence`, see `interfaces.attestation.md`
    bytes evidence = 3;
}

message ChaincodeRequest {
    // the function and args to invoke
    protos.ChaincodeInput input = 1;

    // key to (aes128-gcm) encrypt ChaincodeResponse
    bytes return_encryption_key = 3;
}

message EncryptedChaincodeRequest {
    // an RSA-encryption of the serialization of ChaincodeRequest with the chaincode encryption key
    bytes encrypted_request = 1;
}

message ChaincodeResponse {
    // the response of the chaincode invocation
    protos.Response response = 1;
}

message EncryptedChaincodeResponse {
    // an aes128-gcm encryption of the serialization of ChaincodeResponse
    bytes encrypted_response = 1;

    // R/W set (of cleartext keys but encrypted values)
    // This field is only valid for the lightweight FPC variant but absent from the full version with in-peer FPC validation
    kvrwset.KVRWSet encrypted_rw_set = 2;

    // signature over cleartext response and (hash of) R/W set
    bytes signature = 3;

    // identity for public key used to sign
    string enclave_id = 4;
}
