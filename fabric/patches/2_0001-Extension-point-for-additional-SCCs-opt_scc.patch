From d03f30ff1be38eeb270d6714563204dfbcca4d54 Mon Sep 17 00:00:00 2001
From: michael steiner <michael.steiner@intel.com>
Date: Fri, 31 Jul 2020 14:21:19 -0700
Subject: [PATCH 1/4] Extension point for additional SCCs (opt_scc)

* allows build-time enablement via go build tags

Signed-off-by: michael steiner <michael.steiner@intel.com>
---
 core/scc/opt_scc/registry.go      | 34 +++++++++++++++
 core/scc/opt_scc/registry_test.go | 69 +++++++++++++++++++++++++++++++
 internal/peer/node/start.go       | 13 +++++-
 3 files changed, 115 insertions(+), 1 deletion(-)
 create mode 100644 core/scc/opt_scc/registry.go
 create mode 100644 core/scc/opt_scc/registry_test.go

diff --git a/core/scc/opt_scc/registry.go b/core/scc/opt_scc/registry.go
new file mode 100644
index 000000000..9a658dc56
--- /dev/null
+++ b/core/scc/opt_scc/registry.go
@@ -0,0 +1,34 @@
+/*
+ Copyright 2020 Intel Corporation
+
+SPDX-License-Identifier: Apache-2.0
+*/
+
+package opt_scc
+
+import (
+	"github.com/hyperledger/fabric/common/flogging"
+	"github.com/hyperledger/fabric/core/aclmgmt"
+	"github.com/hyperledger/fabric/core/peer"
+	"github.com/hyperledger/fabric/core/scc"
+)
+
+var logger = flogging.MustGetLogger("opt_scc")
+var factories = make([]FactoryFunc, 0)
+
+// FactoryFunc defines the type for factory function registring an optional system chaincode
+type FactoryFunc func(aclProvider aclmgmt.ACLProvider, p *peer.Peer) scc.SelfDescribingSysCC
+
+// AddFactoryFunc allows to register a factory function for an optional system chaincode
+func AddFactoryFunc(ff FactoryFunc) {
+	if ff == nil {
+		logger.Panic("Illegal factory function")
+	}
+	factories = append(factories, ff)
+}
+
+//ListFactoryFuncs lists all registered factory functions
+func ListFactoryFuncs() []FactoryFunc {
+	logger.Debug("ListFactoryFuncs: %v", factories)
+	return factories
+}
diff --git a/core/scc/opt_scc/registry_test.go b/core/scc/opt_scc/registry_test.go
new file mode 100644
index 000000000..55fb720cf
--- /dev/null
+++ b/core/scc/opt_scc/registry_test.go
@@ -0,0 +1,69 @@
+/*
+Copyright 2020 Intel Corporation
+
+SPDX-License-Identifier: Apache-2.0
+*/
+
+package opt_scc_test
+
+import (
+	"sort"
+	"testing"
+
+	. "github.com/onsi/gomega"
+
+	"github.com/hyperledger/fabric-chaincode-go/shim"
+	"github.com/hyperledger/fabric/core/aclmgmt"
+	"github.com/hyperledger/fabric/core/peer"
+	"github.com/hyperledger/fabric/core/scc"
+	"github.com/hyperledger/fabric/core/scc/opt_scc"
+)
+
+type mock_scc struct {
+	name string
+}
+
+func (s *mock_scc) Name() string {
+	return s.name
+}
+func (s *mock_scc) Chaincode() shim.Chaincode {
+	return nil
+}
+
+func TestRegistry(t *testing.T) {
+	g := NewGomegaWithT(t)
+
+	// 1. initially we should get an empty list
+	ffs := opt_scc.ListFactoryFuncs()
+	g.Expect(ffs).NotTo(BeNil(), "factory function list should not be nil")
+	g.Expect(len(ffs)).To(Equal(0), "factory function list should have zero elements")
+
+	// 2. after adding several handlers, make sure it returns exactly and only these handlers
+	names := []string{"ff1", "ff2", "ff3"}
+	for _, n := range names {
+		nLocal := n // to get separate version for below closure ...
+		opt_scc.AddFactoryFunc(
+			func(aclProvider aclmgmt.ACLProvider, p *peer.Peer) scc.SelfDescribingSysCC {
+				return &mock_scc{nLocal}
+			})
+	}
+	ffs = opt_scc.ListFactoryFuncs()
+	g.Expect(ffs).NotTo(BeNil(), "factory function list should not be nil")
+	g.Expect(len(ffs)).To(Equal(len(names)), "factory function list should have %v elements", len(names))
+	got_names := []string{}
+	for i, ff := range ffs {
+		s := ff(nil, nil)
+		g.Expect(s).NotTo(BeNil(), "received unexpected factory function (element %v in list) returns nil", i)
+		got_names = append(got_names, s.Name())
+	}
+	// Note: we do not force any order, so compare sorted lists
+	sort.Strings(names)
+	sort.Strings(got_names)
+	g.Expect(got_names).To(Equal(names), "Unexpected factory function in list")
+
+	// 3. Test that error on nil factory functions
+	g.Expect(func() {
+		opt_scc.AddFactoryFunc(nil)
+	}).To(Panic(), "Adding a nil factory function should panic")
+
+}
diff --git a/internal/peer/node/start.go b/internal/peer/node/start.go
index 63c0ae919..5217ce540 100644
--- a/internal/peer/node/start.go
+++ b/internal/peer/node/start.go
@@ -73,6 +73,7 @@ import (
 	"github.com/hyperledger/fabric/core/scc"
 	"github.com/hyperledger/fabric/core/scc/cscc"
 	"github.com/hyperledger/fabric/core/scc/lscc"
+	"github.com/hyperledger/fabric/core/scc/opt_scc"
 	"github.com/hyperledger/fabric/core/scc/qscc"
 	"github.com/hyperledger/fabric/core/transientstore"
 	"github.com/hyperledger/fabric/discovery"
@@ -595,6 +596,16 @@ func serve(args []string) error {
 		"_lifecycle": {},
 	}
 
+	optSCCInsts := []scc.SelfDescribingSysCC{}
+	for _, ff := range opt_scc.ListFactoryFuncs() {
+		osi := ff(aclProvider, peerInstance)
+		if osi == nil {
+			logger.Panic("Optional SCC factory function returning nil SCC")
+		}
+		optSCCInsts = append(optSCCInsts, osi)
+		builtinSCCs[osi.Name()] = struct{}{}
+	}
+
 	lsccInst := &lscc.SCC{
 		BuiltinSCCs: builtinSCCs,
 		Support: &lscc.SupportImpl{
@@ -744,7 +755,7 @@ func serve(args []string) error {
 	}
 
 	// deploy system chaincodes
-	for _, cc := range []scc.SelfDescribingSysCC{lsccInst, csccInst, qsccInst, lifecycleSCC} {
+	for _, cc := range append([]scc.SelfDescribingSysCC{lsccInst, csccInst, qsccInst, lifecycleSCC}, optSCCInsts...) {
 		if enabled, ok := chaincodeConfig.SCCAllowlist[cc.Name()]; !ok || !enabled {
 			logger.Infof("not deploying chaincode %s as it is not enabled", cc.Name())
 			continue
-- 
2.28.0

