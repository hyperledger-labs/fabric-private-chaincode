From 5cf560ae930f4bf11246d2ff5ee2ad6e15925ccd Mon Sep 17 00:00:00 2001
From: michael steiner <michael.steiner@intel.com>
Date: Sun, 23 Aug 2020 16:20:20 -0700
Subject: [PATCH 3/4] Mock SCC for opt_scc extension point

Signed-off-by: michael steiner <michael.steiner@intel.com>
---
 core/scc/opt_scc/mock.go      | 28 +++++++++++++++++++++
 core/scc/opt_scc/mock/echo.go | 46 +++++++++++++++++++++++++++++++++++
 2 files changed, 74 insertions(+)
 create mode 100644 core/scc/opt_scc/mock.go
 create mode 100644 core/scc/opt_scc/mock/echo.go

diff --git a/core/scc/opt_scc/mock.go b/core/scc/opt_scc/mock.go
new file mode 100644
index 000000000..61cc77d94
--- /dev/null
+++ b/core/scc/opt_scc/mock.go
@@ -0,0 +1,28 @@
+//+build mock_scc
+
+/*
+Copyright IBM Corp. All Rights Reserved.
+Copyright 2020 Intel Corporation
+
+SPDX-License-Identifier: Apache-2.0
+*/
+
+package opt_scc
+
+import (
+	"github.com/hyperledger/fabric/common/flogging"
+	"github.com/hyperledger/fabric/core/aclmgmt"
+	"github.com/hyperledger/fabric/core/peer"
+	"github.com/hyperledger/fabric/core/scc"
+	"github.com/hyperledger/fabric/core/scc/opt_scc/mock"
+)
+
+var mscclogger = flogging.MustGetLogger("mscc")
+
+func init() {
+	mscclogger.Debug("Registring mock as system chaincode")
+	AddFactoryFunc(func(aclProvider aclmgmt.ACLProvider, p *peer.Peer) scc.SelfDescribingSysCC {
+		mscclogger.Debug("Enabling mock as system chaincode")
+		return mock.New(aclProvider, p)
+	})
+}
diff --git a/core/scc/opt_scc/mock/echo.go b/core/scc/opt_scc/mock/echo.go
new file mode 100644
index 000000000..0a5c67892
--- /dev/null
+++ b/core/scc/opt_scc/mock/echo.go
@@ -0,0 +1,46 @@
+/*
+Copyright IBM Corp. All Rights Reserved.
+
+SPDX-License-Identifier: Apache-2.0
+*/
+
+package mock
+
+import (
+	"fmt"
+
+	"github.com/hyperledger/fabric-chaincode-go/shim"
+	pb "github.com/hyperledger/fabric-protos-go/peer"
+	"github.com/hyperledger/fabric/common/flogging"
+	"github.com/hyperledger/fabric/core/aclmgmt"
+	"github.com/hyperledger/fabric/core/peer"
+)
+
+func New(aclProvider aclmgmt.ACLProvider, p *peer.Peer) *EchoSCC {
+	return &EchoSCC{}
+}
+
+// EchoSCC echos any (string) request back as response
+type EchoSCC struct {
+}
+
+func (e *EchoSCC) Name() string              { return "mscc" }
+func (e *EchoSCC) Chaincode() shim.Chaincode { return e }
+
+var mscclogger = flogging.MustGetLogger("mscc")
+
+func (e *EchoSCC) Init(stub shim.ChaincodeStubInterface) pb.Response {
+	mscclogger.Info("Init MSCC")
+
+	return shim.Success(nil)
+}
+
+// Invoke is called with args[0] contains the query function name, args[1]
+func (e *EchoSCC) Invoke(stub shim.ChaincodeStubInterface) pb.Response {
+	args := stub.GetStringArgs()
+
+	mscclogger.Infof("Invoke MSCC(%v)", args)
+
+	bytes := []byte(fmt.Sprintf("%v", args))
+	return shim.Success(bytes)
+}
-- 
2.28.0

